STRUCT

In C, a struct (short for structure) is a user-defined data type 
that allows you to group different variables under one name. 
Each variable inside a struct is called a member, and these members 
can be of different data types (e.g., integers, floats, arrays, etc.).


Define a struct to represent a point in 2D space

struct Point {
    int x;  // Member 1
    int y;  // Member 2
};

int main() {
    // Declare and initialize a variable of type 'struct Point'
    struct Point p1;
    p1.x = 10;
    p1.y = 20;

    // Print the values
    printf("Point coordinates: (%d, %d)\n", p1.x, p1.y);

    return 0;
}


TYPEDEF

In C, typedef is a keyword that allows you to give a new name (alias) 
to an existing data type. It is commonly used to make code more 
readable and easier to manage, especially when working with complex 
types like structures, pointers, or function pointers


typedef struct {
    int x;
    int y;
} Point;  // Now 'Point' can be used directly without 'struct'

int main() {
    Point p1;  // No need to write 'struct' anymore
    p1.x = 10;
    p1.y = 20;

    printf("Point: (%d, %d)\n", p1.x, p1.y);
    return 0;
}

*
Pointer Declaration: When used in a variable declaration, * indicates that the 
variable is a pointer to a certain type.




MEMORY ALLOCATION

Memory allocation in C refers to the process of reserving a portion of 
the computer's memory for storing data during the runtime of a program. 
In C, memory can be allocated in two ways:

1. Static Memory Allocation: 
This is done at compile time for variables with fixed sizes.

int arr[10];  // Static allocation of an array of 10 integers
Memory for arr is allocated when the program starts, 
and it cannot be resized during runtime.

Limitations of static memory allocation:

The size of the memory is fixed and cannot be changed.
Memory is freed automatically at the end of the program's execution 
or when the variables go out of scope.








2. Dynamic Memory Allocation: 
This is done at runtime using C standard library functions that 
allow for more flexible memory management.


Allows the program to allocate memory at runtime, as needed. 
This is useful when you donâ€™t know the size of data in advance or 
when you need to allocate or deallocate memory during the program's execution.

In C, dynamic memory is managed using four main functions from the C standard library:

    malloc (Memory Allocation)
    calloc (Contiguous Allocation)
    realloc (Reallocation)
    free (Deallocation)



1. Memory Allocation (melloc)
malloc allocates a specified amount of memory in bytes and 
returns a pointer to the beginning of that memory block. 
The memory is not initialized.


#include <stdio.h>
#include <stdlib.h>

int main() {
    int *arr;

    // Allocate memory for an array of 5 integers
    arr = (int *)malloc(5 * sizeof(int));

    if (arr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Use the allocated memory
    for (int i = 0; i < 5; i++) {
        arr[i] = i + 1;
        printf("%d ", arr[i]);
    }

    // Free the allocated memory
    free(arr);

    return 0;
}


2. Contiguous Allocation (calloc)
calloc is similar to malloc, but it also initializes the allocated memory to zero. 
It takes two arguments: the number of elements and the size of each element.

int *arr = (int *)calloc(5, sizeof(int));  // Allocates memory for 5 integers, all initialized to 0


The allocated memory is both allocated and initialized to zero.



3.Reallocation (relloc)
realloc changes the size of a previously allocated memory block. 
It can expand or shrink the memory block, copying the existing data to the new block if needed.

arr = (int *)realloc(arr, 10 * sizeof(int));  // Resize the array to hold 10 integers


f the new size is larger, the old data is preserved and additional memory is allocated. 
If the new size is smaller, the data that doesn't fit is discarded.


4. Deallocation (free)
free is used to deallocate memory that was previously allocated with 
malloc, calloc, or realloc. This is important for preventing memory leaks 
(when memory is no longer needed but hasn't been freed).

free(arr);  // Deallocate memory


****** Example Using Dynamic Memory Allocation ********

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i;
    int *arr;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    // Dynamically allocate memory using malloc
    arr = (int *)malloc(n * sizeof(int));

    // Check if the memory has been successfully allocated
    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    // Store values in allocated memory
    for (i = 0; i < n; i++) {
        arr[i] = i + 1;
    }

    // Print values
    printf("Elements of array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Free allocated memory
    free(arr);

    return 0;
}





